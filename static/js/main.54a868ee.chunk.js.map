{"version":3,"sources":["sparks.js","App.js","index.js"],"names":["extend","meshline","r","Math","max","random","Fatline","curve","width","color","speed","material","useRef","useFrame","current","uniforms","dashOffset","value","attach","vertices","ref","transparent","depthTest","lineWidth","dashArray","dashRatio","Sparks","mouse","count","colors","radius","lines","useMemo","Array","fill","map","_","index","pos","THREE","sin","cos","points","angle","PI","add","clone","getPoints","parseInt","length","useThree","size","viewport","aspect","rotation","x","lerp","y","position","scale","props","key","randomNumber","min","floor","royal_black","Box","useBox","mass","api","useState","hovered","setHover","active","setActive","onClick","velocity","set","onPointerOver","event","onPointerOut","castShadow","receiveShadow","Box2","Box3","Plane","usePlane","args","App","shadowMap","linear","dpr","camera","zoom","intensity","fontSize","maxWidth","lineHeight","letterSpacing","textAlign","font","anchorX","anchorY","anchorZ","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.54a868ee.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport React, { useRef, useMemo } from 'react'\nimport { extend, useFrame, useThree } from 'react-three-fiber'\nimport * as meshline from 'threejs-meshline'\n\nextend(meshline)\n\nconst r = () => Math.max(0.2, Math.random())\n\nfunction Fatline({ curve, width, color, speed }) {\n  const material = useRef()\n  useFrame(() => (material.current.uniforms.dashOffset.value -= speed))\n  return (\n    <mesh>\n      <meshLine attach=\"geometry\" vertices={curve} />\n      <meshLineMaterial ref={material} transparent depthTest={false} lineWidth={width} color={color} dashArray={0.1} dashRatio={0.95} />\n    </mesh>\n  )\n}\n\nexport default function Sparks({ mouse, count, colors, radius = 10 }) {\n  const lines = useMemo(\n    () =>\n      new Array(count).fill().map((_, index) => {\n        const pos = new THREE.Vector3(Math.sin(0) * radius * r(), Math.cos(0) * radius * r(), 0)\n        const points = new Array(30).fill().map((_, index) => {\n          const angle = (index / 20) * Math.PI * 2\n          return pos.add(new THREE.Vector3(Math.sin(angle) * radius * r(), Math.cos(angle) * radius * r(), 0)).clone()\n        })\n        const curve = new THREE.CatmullRomCurve3(points).getPoints(1000)\n        return {\n          color: colors[parseInt(colors.length * Math.random())],\n          width: Math.max(0.1, (0.2 * index) / 10),\n          speed: Math.max(0.001, 0.004 * Math.random()),\n          curve\n        }\n      }),\n    [count]\n  )\n\n  const ref = useRef()\n  const { size, viewport } = useThree()\n  const aspect = size.width / viewport.width\n  useFrame(() => {\n    if (ref.current) {\n      ref.current.rotation.x = THREE.MathUtils.lerp(ref.current.rotation.x, 0 + mouse.current[1] / aspect / 200, 0.1)\n      ref.current.rotation.y = THREE.MathUtils.lerp(ref.current.rotation.y, 0 + mouse.current[0] / aspect / 400, 0.1)\n    }\n  })\n\n  return (\n    <group ref={ref}>\n      <group position={[-radius * 2, -radius, -10]} scale={[1, 1.3, 1]}>\n        {lines.map((props, index) => (\n          <Fatline key={index} {...props} />\n        ))}\n      </group>\n    </group>\n  )\n}\n","import React, { useState, useRef } from \"react\";\nimport { Canvas } from \"react-three-fiber\";\nimport { Text, Stars } from \"drei\";\nimport { Physics, useBox, usePlane } from \"use-cannon\";\nimport Sparks from './sparks'\nimport \"./styles.css\";\n\nfunction randomNumber(min, max) { \n  return Math.floor(Math.random() * (max - min) + min);\n} \n\nconst deep_pink = '#ed529e'\nconst royal_black = '#08020e'\nconst blanched_almond = '#ffa600'\nconst logo_purple = '#522a66'\n\nfunction Box() {\n  const [ref, api] = useBox(() => ({\n    mass: 30,\n    position: [0, 8, -2],\n    rotation: [0, 45, 0]\n  }));\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n  return (\n    <mesh \n      onClick={() => {\n        api.velocity.set(randomNumber(-10, 10), randomNumber(-10, 10), randomNumber(-10, 10))\n        setActive(!active)\n      }}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}\n      ref={ref} position={[1, 1, 0]} castShadow receiveShadow\n    >\n      <boxBufferGeometry attach=\"geometry\" />\n      <meshStandardMaterial attach=\"material\" color={hovered ? 'cyan' : deep_pink} />\n    </mesh>\n  )\n};\n\nfunction Box2() {\n  const [ref, api] = useBox(() => ({\n    mass: 30,\n    position: [-0.8, 10, -1],\n    rotation: [0, 5, 0]\n  }));\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n  return (\n    <mesh \n      onClick={() => {\n        api.velocity.set(randomNumber(-10, 10), randomNumber(-10, 10), randomNumber(-10, 10))\n        setActive(!active)\n      }}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}\n      ref={ref} position={[1, 1, 0]} castShadow receiveShadow\n    >\n      <boxBufferGeometry attach=\"geometry\" />\n      <meshStandardMaterial attach=\"material\" color={hovered ? 'cyan' : logo_purple} />\n    </mesh>\n  )\n};\n\nfunction Box3() {\n  const [ref, api] = useBox(() => ({\n    mass: 30,\n    position: [-0.5, 12, -1.35],\n    rotation: [0, 10, 0]\n  }));\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n  return (\n    <mesh \n      onClick={() => {\n        api.velocity.set(randomNumber(-10, 10), randomNumber(-10, 10), randomNumber(-10, 10))\n        setActive(!active)\n      }}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}\n      ref={ref} position={[1, 1, 0]} castShadow receiveShadow\n    >\n      <boxBufferGeometry attach=\"geometry\" />\n      <meshStandardMaterial attach=\"material\" color={hovered ? 'cyan' : blanched_almond} />\n    </mesh>\n  )\n};\n\nfunction Plane() {\n  const [ref] = usePlane(() => ({\n    rotation: [-Math.PI / 2, 0, 0],\n    position: [0, -2, 0]\n  }));\n\n  return (\n    <mesh ref={ref} position={[0, -1, 0]} rotation={[-Math.PI / 2, 0, 0]} receiveShadow>\n      <planeBufferGeometry attach=\"geometry\" args={[100, 100]} />\n      <meshLambertMaterial attach=\"material\" color={royal_black} />\n    </mesh>\n  )\n}\n\nexport default function App() {\n  const mouse = useRef([0, 0])\n\n  return (\n    <Canvas shadowMap linear\n      dpr={[1, 2]}\n      camera={{\n        position: [0, 3, 10],\n        zoom: 2\n      }}\n    >\n      <Stars />\n      <Sparks count={10} mouse={mouse} colors={['#A2CCB6', '#FCEEB5', '#EE786E', '#e0feff', 'lightpink', 'lightblue']} />\n\n      <spotLight position={[10, 15,10]} angle={0.3} castShadow />\n      <fog attach=\"fog\" args={[royal_black, 0, 40]} />\n      <ambientLight intensity={0.5} />\n\n      <Physics>\n        <Box castShadow />\n        <Box2 castShadow />\n        <Box3 castShadow />\n        <Plane receiveShadow />\n      </Physics>\n\n      <Text\n        color=\"#ffffffff\"\n        fontSize={1}\n        maxWidth={200}\n        lineHeight={1}\n        letterSpacing={0.2}\n        textAlign={'left'}\n        font=\"https://allfont.net/allfont.css?fonts=montserrat-hairline\"\n        anchorX=\"back\" anchorY=\"top\" anchorZ=\"middle\"\n        castShadow\n      >\n        ANZEN\n      </Text>\n      \n    </Canvas>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}